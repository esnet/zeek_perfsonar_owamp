# Generated by binpac_quickstart


# Informational, what this means is:
# If is_orig is false, then store the result of Server_Msg() in server_info

# TODO:  In theory, for non-encrypted sessions, we could also pull the negotiated
# test session data and mark those as owamp-data

# Do we care that we never use these _info variables?
type OWAMP_PDU(is_orig: bool) = case is_orig of {
    false -> server_info  : Server_Msg;
    true  -> client_info : Client_Reply;
} &byteorder=bigendian;


# We keep a simple state variable to know where we are in the protocol negotiation
type Server_Msg() = case context.connection.get_state() of {
	0 -> server_info : Server_Greeting;
	1 -> server_accept : Server_Accept;
    2 -> blaa : Server_Done;
} &byteorder=bigendian;


type Server_Accept() = record {
	empty_bytes : RE/\x00{15}/;
	accept      : uint8;
} &byteorder=bigendian &length=48 &let {
	server_accept	: bool = context.connection.set_state(2);	
};

# Accept types:
#     0    OK.
#     1    Failure, reason unspecified (catch-all).
#     2    Internal error.
#     3    Some aspect of request is not supported.
#     4    Cannot perform request due to permanent resource limitations.
#     5    Cannot perform request due to temporary resource limitations.

type Server_Greeting() = record {
#	empty_bytes	: bytestring &length = 15;   # this can be an RE// to actually specify the correct byte values
	empty_bytes : RE/\x00{15}/;
	modes		: uint8;
	# grab mode offering.
	# if modes == 0, connection should be closing.
	data: bytestring &length=48;
} &byteorder=bigendian &length=64 &let {
	greeting_done	: bool = context.connection.set_state(1);	
};

# could probably just set_done directly from Server_Msg()
type Server_Done() = record {
	data: bytestring &length=1;
} &let {
	stop	: bool = context.connection.set_done(true);	
};

# TODO
# we may not actually want to stop analyzing there as if there's no auth or encryption we can pull things about
# the spawned OWAMP test sessions, but for now this is good.

type Client_Reply() = record {
	empty_bytes : RE/\x00{3}/;
	modes		: uint8;
	keyid		: RE/[^\x00]*/;	
} &byteorder=bigendian &length=164;





