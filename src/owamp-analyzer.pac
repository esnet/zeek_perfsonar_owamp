# Generated by binpac_quickstart

refine flow OWAMP_Flow += {

	function proc_owamp_server_greeting(msg: Server_Greeting): bool
		# msg.modes is a uint8 and doesn't need any conversion to val

		%{
		zeek::BifEvent::enqueue_owamp_server_greeting(connection()->bro_analyzer(),
												connection()->bro_analyzer()->Conn(),
												${msg.modes});
		return true;

		%}

	function proc_owamp_client_reply(msg: Client_Reply): bool

		%{
		zeek::BifEvent::enqueue_owamp_client_reply(connection()->bro_analyzer(),
												connection()->bro_analyzer()->Conn(),
												${msg.modes},to_stringval(${msg.keyid}));
		connection()->bro_analyzer()->AnalyzerConfirmation();
		return true;

		%}

	function proc_owamp_server_accept(msg: Server_Accept): bool

		%{
		zeek::BifEvent::enqueue_owamp_server_accept(connection()->bro_analyzer(),
												connection()->bro_analyzer()->Conn(),
												${msg.accept});

		return true;

		%}

};

# A thought...
# Should we not fire any events until we know for sure it's owamp?

refine typeattr Server_Greeting += &let {
	proc: bool = $context.flow.proc_owamp_server_greeting(this);
};

refine typeattr Client_Reply += &let {
	proc: bool = $context.flow.proc_owamp_client_reply(this);
};

refine typeattr Server_Accept += &let {
	proc: bool = $context.flow.proc_owamp_server_accept(this);
};

refine connection OWAMP_Conn += {
	%member{
		bool stop_analyzing;
		bool server_done;
		int server_state;
	%}

	%init{
		stop_analyzing = false;
		server_done = false;
		server_state = 0;
	%}

	function set_state(new_state: int) : int
		%{
			server_state = new_state;
			return server_state;
		%}

	function get_state() : int
		%{
			return server_state;
		%}

	function set_done(new_state: bool) : bool
		%{
			server_done = new_state;
			return server_done;
		%}

	# this is called from OWAMP.cc
	function get_done() : bool
		%{
			return server_done;
		%}

};
